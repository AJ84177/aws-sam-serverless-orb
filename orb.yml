commands:
  build:
    description: |
      build your Lambda source code and generate deployment artifacts that target Lambda's execution environment. The sam build command iterates through the functions in your application, looks for a manifest file (such as requirements.txt) that contains the dependencies, and automatically creates deployment artifacts that you can deploy to Lambda using the sam package and sam deploy commands. You that can also use sam build in combination with other commands like sam local invoke to test your application locally.
      Optionally package for s3 or run locally
    parameters:
      base-dir:
        default: ""
        description: Resolves relative paths to the function's source code with respect
          to this folder. Use this if the AWS SAM template and your source code aren't
          in the same enclosing folder. By default, relative paths are resolved with
          respect to the template's location.
        type: string
      build-dir:
        description: The path to a folder where the built artifacts are stored.
        type: string
      debug:
        default: false
        description: Turns on debug logging.
        type: boolean
      profile:
        description: Select a specific profile from your credential file to get AWS
          credentials.
        type: string
      region:
        default: ""
        description: Sets the AWS Region of the service (for example, us-east-1).
        type: string
      s3-bucket:
        default: ""
        description: The name of the S3 bucket where this command uploads the artifacts
          that are referenced in your template. If this option is set, the sam package
          command will be ran automatically.
        type: string
      template:
        description: The AWS SAM template file
        type: string
      use-container:
        default: true
        description: If your functions depend on packages that have natively compiled
          dependencies, use this flag to build your function inside an AWS Lambda-like
          Docker container.
        type: boolean
    steps:
    - install
    - run:
        command: |
          sam build \
            <<# parameters.base-dir >>--base-dir<< parameters.base-dir >><</ parameters.base-dir >>
            --build-dir << parameters.build-dir >> \
            <<# parameters.use-container >>--use-container<< parameters.use-container >><</ parameters.use-container >> \
            <<# parameters.template >>--template<< parameters.template >><</ parameters.template >> \
            --profile << parameters.profile >> \
            --region << parameters.region >> \
            <<# parameters.debug >>--debug<< parameters.debug >><</ parameters.debug >>
  deploy:
    description: |
      Deploys an AWS SAM application.
    parameters:
      debug:
        default: false
        description: Turns on debug logging.
        type: boolean
      profile:
        description: Select a specific profile from your credential file to get AWS
          credentials.
        type: string
      region:
        default: ""
        description: Sets the AWS Region of the service (for example, us-east-1).
        type: string
      stack-name:
        description: The name of the AWS CloudFormation stack you're deploying to.
          If you specify an existing stack, the command updates the stack. If you
          specify a new stack, the command creates it.
        type: string
      template-file:
        default: ./
        description: The path where your AWS SAM template file is located.
        type: string
    steps:
    - install
    - run:
        command: |
          sam deploy \
            --template-file << parameters.template-file >> \
            --stack-name << parameters.stack-name >> \
            <<# parameters.profile >>--profile << parameters.profile >><</ parameters.profile >> \
            --region << parameters.region >> \
            <<# parameters.debug >>--debug<< parameters.debug >><</ parameters.debug >>
  install:
    description: |
      Install and configure the AWS CLI and the SAM CLI in one command. Must have IAM credentials set via environment variables.
    parameters:
      aws-access-key-id:
        default: AWS_ACCESS_KEY_ID
        description: |
          AWS access key id for IAM role. Set this to the name of
          the environment variable you will use to hold this
          value, i.e. AWS_ACCESS_KEY.
        type: env_var_name
      aws-region:
        default: AWS_DEFAULT_REGION
        description: |
          Env var of AWS region to operate in
          (defaults to AWS_DEFAULT_REGION)
        type: env_var_name
      aws-secret-access-key:
        default: AWS_SECRET_ACCESS_KEY
        description: |
          AWS secret key for IAM role. Set this to the name of
          the environment variable you will use to hold this
          value, i.e. $AWS_SECRET_ACCESS_KEY.
        type: env_var_name
      configure-default-region:
        default: true
        description: |
          Some AWS actions don't require a region; set this to false if you do not want to store a default region in ~/.aws/config
        type: boolean
      profile-name:
        default: default
        description: Profile name to be configured.
        type: string
    steps:
    - aws-cli/install
    - aws-cli/configure:
        aws-access-key-id: << parameters.aws-access-key-id >>
        aws-region: << parameters.aws-region >>
        aws-secret-access-key: << parameters.aws-secret-access-key >>
        configure-default-region: << parameters.configure-default-region >>
        profile-name: << parameters.profile-name >>
    - run:
        command: sudo pip install aws-sam-cli --upgrade
        name: Install the AWS SAM CLI
description: |
  Sample orb description # What will your orb allow users to do? # Descriptions should be short, simple, and clear.
examples:
  example:
    description: |
      Sample example description. # What will this example document? # Descriptions should be short, simple, and clear.
    usage:
      jobs:
        build:
          machine: true
          steps:
          - foo/hello:
              username: Anna
      orbs:
        foo: bar/foo@1.2.3
      version: 2.1
executors:
  default:
    description: |
      This is a sample executor using Docker and Node. # What is this executor? # Descriptions should be short, simple, and clear.
    machine: true
jobs:
  deploy:
    description: |
      Deploy serverless
    executor: default
    parameters:
      greeting:
        default: Hello
        description: Select a proper greeting
        type: string
    steps:
    - run: echo test
orbs:
  aws-cli: circleci/aws-cli@0.1.13
version: 2.1

